#!/usr/bin/env python3
import os
import logging
import requests
import yfinance as yf
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = '8320641094:AAG1JVdI6BaPLgoUIAYmI3QgymnDG6x3hZE'
PORT = int(os.getenv('PORT', 8080))

class SP500StockBot:
    def __init__(self):
        self.sp500_symbols = None
        self.last_update = None
        
    def get_sp500_symbols(self):
        """Áç≤ÂèñÊ®ôÊôÆ500ËÇ°Á•®Ê∏ÖÂñÆÔºà‰ΩøÁî®Êì¥Â±ïÂõ∫ÂÆöÊ∏ÖÂñÆÁ¢∫‰øùÁ©©ÂÆöÊÄßÔºâ"""
        if self.sp500_symbols:
            return self.sp500_symbols
            
        # ÂÆåÊï¥Ê®ôÊôÆ500ËÇ°Á•®Ê∏ÖÂñÆÔºàÂõ∫ÂÆöÁâàÊú¨ÔºåÈÅøÂÖç‰æùË≥¥ÂïèÈ°åÔºâ
        sp500_symbols = [
            # ÁßëÊäÄËÇ° - Technology
            'AAPL', 'MSFT', 'GOOGL', 'GOOG', 'AMZN', 'TSLA', 'META', 'NVDA', 'ORCL', 'CRM',
            'NFLX', 'AMD', 'INTC', 'QCOM', 'CSCO', 'IBM', 'NOW', 'INTU', 'AMAT', 'ADI',
            'MU', 'MRVL', 'KLAC', 'LRCX', 'SNPS', 'CDNS', 'FTNT', 'TEAM', 'WDAY', 'ZM',
            'DOCU', 'OKTA', 'SPLK', 'VEEV', 'ZS', 'CRWD', 'DDOG', 'SNOW', 'NET', 'PLTR',
            
            # ÈáëËûçËÇ° - Financial Services
            'JPM', 'BAC', 'WFC', 'GS', 'MS', 'BLK', 'SCHW', 'AXP', 'USB', 'PNC',
            'COF', 'TFC', 'BK', 'STT', 'FITB', 'HBAN', 'RF', 'CFG', 'KEY', 'ZION',
            'AIG', 'PRU', 'MET', 'AFL', 'ALL', 'TRV', 'PGR', 'CB', 'AJG', 'MMC',
            'AON', 'WTW', 'BRO', 'CINF', 'L', 'FNF', 'RJF', 'NTRS', 'IVZ', 'BEN',
            
            # ÈÜ´ÁôÇ‰øùÂÅ• - Healthcare
            'UNH', 'JNJ', 'PFE', 'ABBV', 'LLY', 'TMO', 'ABT', 'MDT', 'BMY', 'MRK',
            'DHR', 'CVS', 'CI', 'HUM', 'ANTM', 'SYK', 'GILD', 'ISRG', 'ZTS', 'BSX',
            'ELV', 'REGN', 'VRTX', 'BIIB', 'ILMN', 'MRNA', 'AMGN', 'CELG', 'IDXX', 'IQV',
            'A', 'RMD', 'DXCM', 'EW', 'ZBH', 'STE', 'HOLX', 'ALGN', 'TFX', 'COO',
            
            # Ê∂àË≤ªÂìÅ - Consumer Discretionary & Staples
            'PG', 'KO', 'PEP', 'WMT', 'HD', 'MCD', 'NKE', 'SBUX', 'TGT', 'LOW',
            'COST', 'DIS', 'CMCSA', 'VZ', 'T', 'TMUS', 'CL', 'KMB', 'GIS', 'K',
            'AMZN', 'TSLA', 'F', 'GM', 'NFLX', 'DIS', 'CMCSA', 'CHTR', 'PARA', 'WBD',
            'GPS', 'M', 'JWN', 'NCLH', 'CCL', 'RCL', 'MGM', 'WYNN', 'LVS', 'PENN',
            
            # Â∑•Ê•≠ËÇ° - Industrials
            'BA', 'CAT', 'GE', 'MMM', 'HON', 'UPS', 'RTX', 'LMT', 'NOC', 'GD',
            'DE', 'EMR', 'ETN', 'ITW', 'PH', 'CMI', 'FDX', 'NSC', 'UNP', 'CSX',
            'LUV', 'DAL', 'UAL', 'AAL', 'JBLU', 'ALK', 'SAVE', 'WAB', 'TXT', 'ROK',
            'DOV', 'IR', 'FAST', 'PCAR', 'CHRW', 'EXPD', 'JBHT', 'KNX', 'SWK', 'PKG',
            
            # ËÉΩÊ∫êËÇ° - Energy
            'XOM', 'CVX', 'COP', 'EOG', 'SLB', 'MPC', 'PSX', 'VLO', 'HES', 'DVN',
            'KMI', 'OKE', 'WMB', 'EPD', 'ET', 'MPLX', 'PAGP', 'BKR', 'HAL', 'FTI',
            'NOV', 'RIG', 'VAL', 'MRO', 'APA', 'FANG', 'PXD', 'CXO', 'OVV', 'CLR',
            
            # ÊùêÊñôËÇ° - Materials
            'LIN', 'APD', 'ECL', 'FCX', 'NEM', 'DOW', 'DD', 'PPG', 'SHW', 'NUE',
            'VMC', 'MLM', 'FMC', 'LYB', 'CF', 'MOS', 'IFF', 'ALB', 'CE', 'PKX',
            'RPM', 'EMN', 'IP', 'WRK', 'SON', 'SEE', 'AVY', 'BALL', 'CCK', 'SLGN',
            
            # ÂÖ¨Áî®‰∫ãÊ•≠ - Utilities
            'NEE', 'DUK', 'SO', 'AEP', 'EXC', 'XEL', 'WEC', 'ED', 'ETR', 'ES',
            'AWK', 'PEG', 'SRE', 'D', 'PCG', 'EIX', 'PPL', 'CMS', 'DTE', 'ATO',
            'CNP', 'NI', 'LNT', 'EVRG', 'AES', 'FE', 'PNW', 'NRG', 'VST', 'CEG',
            
            # ÊàøÂú∞Áî¢ - Real Estate
            'AMT', 'PLD', 'CCI', 'EQIX', 'SPG', 'O', 'WELL', 'DLR', 'PSA', 'EQR',
            'AVB', 'VTR', 'ARE', 'SBAC', 'UDR', 'ESS', 'MAA', 'KIM', 'REG', 'FRT',
            'BXP', 'HST', 'SLG', 'VNO', 'PEAK', 'AMH', 'EXR', 'CPT', 'AIV', 'BRX',
            
            # ÈáëËûçÊúçÂãô - Financial (Payment processors, etc.)
            'V', 'MA', 'PYPL', 'SQ', 'FIS', 'FISV', 'ADP', 'PAYX', 'IT', 'ACN',
            'TXN', 'AVGO', 'AAPL', 'MSFT', 'QCOM', 'NOW', 'CRM', 'ORCL', 'IBM', 'HPQ',
            
            # Â§ßÂûãÁ∂úÂêà‰ºÅÊ•≠ - Diversified
            'BRK-B', 'JNJ', 'UNH', 'XOM', 'PG', 'TSLA', 'NVDA', 'META', 'GOOGL', 'AMZN',
            'GE', 'MMM', 'WMT', 'JPM', 'V', 'MA', 'HD', 'PFE', 'VZ', 'DIS',
            
            # ÂÖ∂‰ªñÈáçË¶ÅËÇ°Á•®
            'COST', 'NFLX', 'CRM', 'AMD', 'TMO', 'ABT', 'DHR', 'LIN', 'UNP', 'LOW',
            'QCOM', 'INTC', 'IBM', 'ORCL', 'CSCO', 'TXN', 'AVGO', 'HON', 'UPS', 'CAT',
            'BA', 'MMM', 'WM', 'GD', 'RTX', 'LMT', 'NOC', 'SPGI', 'CME', 'ICE'
        ]
        
        # ÂéªÈáç‰∏¶ÊéíÂ∫è
        sp500_symbols = sorted(list(set(sp500_symbols)))
        
        self.sp500_symbols = sp500_symbols
        self.last_update = datetime.now()
        
        logger.info(f"Loaded {len(sp500_symbols)} S&P 500 symbols")
        return sp500_symbols
    
    async def get_real_stock_data(self, symbol):
        """Áç≤ÂèñÁúüÂØ¶ËÇ°Á•®Êï∏Êìö"""
        try:
            logger.info(f"Fetching real data for {symbol}")
            
            # ‰ΩøÁî® yfinance Áç≤ÂèñÊï∏Êìö
            ticker = yf.Ticker(symbol)
            
            # Áç≤ÂèñÂü∫Êú¨‰ø°ÊÅØ
            info = ticker.info
            
            # Ê™¢Êü•ËÇ°Á•®ÊòØÂê¶ÊúâÊïà
            if not info or len(info) < 5:
                logger.warning(f"Invalid or insufficient data for {symbol}")
                return None
            
            # Áç≤ÂèñÊ≠∑Âè≤Êï∏Êìö‰ΩúÁÇ∫ÂÇôÁî®
            hist = ticker.history(period="5d")
            
            # ÊèêÂèñÂÉπÊ†º‰ø°ÊÅØ
            current_price = None
            price_fields = ['currentPrice', 'regularMarketPrice', 'previousClose']
            
            for field in price_fields:
                if field in info and info[field]:
                    current_price = float(info[field])
                    break
            
            # Â¶ÇÊûúÂæûinfoÁç≤Âèñ‰∏çÂà∞Ôºå‰ΩøÁî®Ê≠∑Âè≤Êï∏Êìö
            if not current_price and not hist.empty:
                current_price = float(hist['Close'][-1])
            
            if not current_price:
                logger.warning(f"No price data available for {symbol}")
                return None
            
            # Áç≤ÂèñÂâç‰∏Ä‰∫§ÊòìÊó•Êî∂Áõ§ÂÉπ
            previous_close = info.get('previousClose')
            if not previous_close and len(hist) > 1:
                previous_close = float(hist['Close'][-2])
            elif not previous_close:
                previous_close = current_price
            else:
                previous_close = float(previous_close)
            
            # Ë®àÁÆóËÆäÂãï
            change = current_price - previous_close
            change_percent = (change / previous_close) * 100 if previous_close != 0 else 0
            
            # Ê†ºÂºèÂåñÊàê‰∫§Èáè
            volume = info.get('volume', 0) or info.get('regularMarketVolume', 0)
            if volume > 1000000:
                volume_str = f"{volume/1000000:.1f}M"
            elif volume > 1000:
                volume_str = f"{volume/1000:.1f}K"
            else:
                volume_str = str(volume) if volume else "N/A"
            
            # Áç≤ÂèñÂÖ∂‰ªñ‰ø°ÊÅØ
            market_cap = info.get('marketCap')
            pe_ratio = info.get('trailingPE') or info.get('forwardPE')
            
            # Áç≤Âèñ52ÈÄ±È´ò‰ΩéÈªû
            fifty_two_week_high = info.get('fiftyTwoWeekHigh')
            fifty_two_week_low = info.get('fiftyTwoWeekLow')
            
            return {
                'symbol': symbol,
                'name': info.get('shortName') or info.get('longName', symbol),
                'current_price': current_price,
                'previous_close': previous_close,
                'change': change,
                'change_percent': change_percent,
                'volume': volume,
                'volume_str': volume_str,
                'market_cap': market_cap,
                'pe_ratio': pe_ratio,
                'fifty_two_week_high': fifty_two_week_high,
                'fifty_two_week_low': fifty_two_week_low,
                'data_source': 'Yahoo Finance (Live)',
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
        except Exception as e:
            logger.error(f"Failed to get real data for {symbol}: {e}")
            return None
    
    def format_stock_message(self, data):
        """Ê†ºÂºèÂåñËÇ°Á•®Ë®äÊÅØ"""
        if not data:
            return "Unable to fetch stock data."
        
        # Ê†ºÂºèÂåñËÆäÂãïÈ°ØÁ§∫
        if data['change'] > 0:
            change_emoji = "üìà"
            change_sign = "+"
        elif data['change'] < 0:
            change_emoji = "üìâ"
            change_sign = ""
        else:
            change_emoji = "‚û°Ô∏è"
            change_sign = ""
        
        # Â∏ÇÂÄºÊ†ºÂºèÂåñ
        market_cap_str = "N/A"
        if data.get('market_cap') and data['market_cap'] > 0:
            if data['market_cap'] > 1000000000000:  # ÂÖÜ
                market_cap_str = f"${data['market_cap']/1000000000000:.2f}T"
            elif data['market_cap'] > 1000000000:  # ÂÑÑ
                market_cap_str = f"${data['market_cap']/1000000000:.1f}B"
            elif data['market_cap'] > 1000000:  # ÁôæËê¨
                market_cap_str = f"${data['market_cap']/1000000:.1f}M"
        
        # P/E ÊØîÁéá
        pe_str = f"{data['pe_ratio']:.2f}" if data.get('pe_ratio') and data['pe_ratio'] > 0 else "N/A"
        
        # 52ÈÄ±È´ò‰ΩéÈªû
        high_52w = f"${data['fifty_two_week_high']:.2f}" if data.get('fifty_two_week_high') else "N/A"
        low_52w = f"${data['fifty_two_week_low']:.2f}" if data.get('fifty_two_week_low') else "N/A"
        
        message = f"""{change_emoji} **{data['name']} ({data['symbol']})**

üí∞ **Current Price:** ${data['current_price']:.2f}
üìä **Change:** {change_sign}${abs(data['change']):.2f} ({change_sign}{abs(data['change_percent']):.2f}%)
üìà **Volume:** {data['volume_str']}
üè¢ **Market Cap:** {market_cap_str}
üìã **P/E Ratio:** {pe_str}
üìä **52W High:** {high_52w}
üìä **52W Low:** {low_52w}

üïê **Updated:** {data['timestamp']}
üì° **Data Source:** {data['data_source']}

---
*Maggie Stock AI - Real-time S&P 500 Data*"""
        
        return message

def clear_webhook():
    """Ê∏ÖÈô§ÁèæÊúâÁöÑ webhook Ë®≠ÂÆö"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
        response = requests.get(url, timeout=10)
        result = response.json()
        logger.info(f"Webhook cleared: {result}")
        return result.get('ok', False)
    except Exception as e:
        logger.error(f"Failed to clear webhook: {e}")
        return False

def set_webhook():
    """Ë®≠ÁΩÆ webhook"""
    try:
        # Áç≤Âèñ Render ÊáâÁî®ÁöÑ URL
        render_url = os.getenv('RENDER_EXTERNAL_URL')
        if not render_url:
            # Â¶ÇÊûúÊ≤íÊúâÁí∞Â¢ÉËÆäÈáèÔºå‰ΩøÁî®È†êË®≠
            render_url = "https://maggie-stock-ai.onrender.com"
        
        webhook_url = f"{render_url}/{BOT_TOKEN}"
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        data = {
            'url': webhook_url,
            'allowed_updates': ['message', 'callback_query']
        }
        
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"Webhook set successfully: {webhook_url}")
            return True
        else:
            logger.error(f"Failed to set webhook: {result}")
            return False
            
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")
        return False

# ÂàùÂßãÂåñÊ©üÂô®‰∫∫ÂØ¶‰æã
bot = SP500StockBot()

async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ËôïÁêÜËÇ°Á•®Êü•Ë©¢ÂëΩ‰ª§"""
    try:
        if not context.args:
            sp500_symbols = bot.get_sp500_symbols()
            sample_symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NVDA', 'JPM', 'WMT', 'KO']
            
            await update.message.reply_text(
                f"**Usage:** /stock [SYMBOL]\n\n"
                f"**S&P 500 Support:** {len(sp500_symbols)} stocks available\n\n"
                f"**Popular Examples:**\n" +
                "\n".join([f"‚Ä¢ /stock {symbol}" for symbol in sample_symbols]) +
                f"\n\n**Try:** /list for more options"
            )
            return
        
        symbol = context.args[0].upper().strip()
        
        # Ê™¢Êü•ÊòØÂê¶ÁÇ∫ÊîØÊè¥ÁöÑËÇ°Á•®
        sp500_symbols = bot.get_sp500_symbols()
        if symbol not in sp500_symbols:
            # Êèê‰æõÁõ∏‰ººÁöÑËÇ°Á•®Âª∫Ë≠∞
            suggestions = [s for s in sp500_symbols if symbol in s or s.startswith(symbol[:2])][:5]
            suggestion_text = ""
            if suggestions:
                suggestion_text = f"\n\n**Similar stocks:** {', '.join(suggestions)}"
            
            await update.message.reply_text(
                f"‚ùå Stock symbol '{symbol}' is not in our S&P 500 database.\n\n"
                f"**Database:** {len(sp500_symbols)} S&P 500 stocks\n"
                f"**Popular:** AAPL, MSFT, GOOGL, AMZN, TSLA, META, NVDA\n"
                f"**Use:** /list to see categories{suggestion_text}"
            )
            return
        
        # ÁôºÈÄÅËôïÁêÜ‰∏≠Ë®äÊÅØ
        processing_msg = await update.message.reply_text(
            f"üîç **Analyzing {symbol}...**\n"
            f"‚è±Ô∏è Fetching real-time data from Yahoo Finance..."
        )
        
        # Áç≤ÂèñÁúüÂØ¶ËÇ°Á•®Êï∏Êìö
        stock_data = await bot.get_real_stock_data(symbol)
        
        if stock_data:
            # Ê†ºÂºèÂåñ‰∏¶ÁôºÈÄÅÂÆåÊï¥Â†±Âëä
            final_message = bot.format_stock_message(stock_data)
            await processing_msg.edit_text(final_message)
        else:
            await processing_msg.edit_text(
                f"‚ùå **Unable to fetch data for {symbol}**\n\n"
                f"This might be due to:\n"
                f"‚Ä¢ Market is currently closed\n"
                f"‚Ä¢ Temporary Yahoo Finance API issues\n"
                f"‚Ä¢ Stock delisted or suspended\n"
                f"‚Ä¢ Network connectivity problems\n\n"
                f"Please try again in a few minutes or try another stock."
            )
            
    except Exception as e:
        logger.error(f"Error in stock command: {e}")
        await update.message.reply_text(
            "‚ùå Sorry, I encountered an error while processing your request. Please try again."
        )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ËôïÁêÜ /start ÂëΩ‰ª§"""
    sp500_count = len(bot.get_sp500_symbols())
    
    welcome_message = f"""ü§ñ **Welcome to Maggie Stock AI!**

I provide real-time analysis for S&P 500 stocks with enhanced features.

üìä **Features:**
‚Ä¢ Live stock prices from Yahoo Finance
‚Ä¢ {sp500_count} S&P 500 stocks supported
‚Ä¢ Market cap, P/E ratios, and 52-week ranges
‚Ä¢ Real-time price changes with trend indicators
‚Ä¢ Professional financial metrics

üí° **Quick Commands:**
‚Ä¢ `/stock AAPL` - Get Apple stock data
‚Ä¢ `/stock TSLA` - Get Tesla stock data
‚Ä¢ `/list` - Browse stocks by sector
‚Ä¢ `/help` - Complete command guide

üéØ **Core Philosophy:**
"Real-time data beats delayed information"

‚ú® **New Features:**
‚Ä¢ 52-week high/low tracking
‚Ä¢ Enhanced stock suggestions
‚Ä¢ Expanded S&P 500 coverage

---
üîß Built with precision by Maggie
üìà Powered by Yahoo Finance API"""
    
    await update.message.reply_text(welcome_message)

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """È°ØÁ§∫ÁÜ±ÈñÄËÇ°Á•®Ê∏ÖÂñÆ"""
    popular_stocks = {
        'üöÄ Tech Giants': ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'NVDA', 'TSLA', 'ORCL'],
        'üè¶ Financial': ['JPM', 'BAC', 'WFC', 'GS', 'BLK', 'AXP', 'V', 'MA'],
        'üè• Healthcare': ['UNH', 'JNJ', 'PFE', 'ABBV', 'LLY', 'TMO', 'ABT', 'MDT'],
        'üõí Consumer': ['WMT', 'HD', 'PG', 'KO', 'PEP', 'MCD', 'NKE', 'COST'],
        'üè≠ Industrial': ['BA', 'CAT', 'GE', 'MMM', 'HON', 'UPS', 'RTX', 'LMT'],
        '‚ö° Energy': ['XOM', 'CVX', 'COP', 'EOG', 'SLB', 'MPC'],
        'üè† Real Estate': ['AMT', 'PLD', 'CCI', 'EQIX', 'SPG', 'O']
    }
    
    message = "üìà **S&P 500 Stocks by Sector:**\n\n"
    
    for sector, stocks in popular_stocks.items():
        message += f"**{sector}:**\n"
        for stock in stocks:
            message += f"‚Ä¢ `/stock {stock}`\n"
        message += "\n"
    
    sp500_count = len(bot.get_sp500_symbols())
    message += f"üí° **Total coverage:** {sp500_count} S&P 500 stocks\n"
    message += f"üîç **Tip:** Type stock symbol directly to get suggestions"
    
    await update.message.reply_text(message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ËôïÁêÜ /help ÂëΩ‰ª§"""
    sp500_count = len(bot.get_sp500_symbols())
    
    help_message = f"""üìö **Maggie Stock AI - Complete Guide**

**üîß Commands:**
‚Ä¢ `/stock [SYMBOL]` - Get comprehensive stock data
‚Ä¢ `/list` - Browse stocks organized by sector
‚Ä¢ `/help` - Show this complete guide
‚Ä¢ `/start` - Welcome screen and overview

**üìä Data Coverage:**
‚Ä¢ {sp500_count} S&P 500 companies tracked
‚Ä¢ Real-time prices via Yahoo Finance API
‚Ä¢ Market cap, P/E ratios, trading volume
‚Ä¢ 52-week high/low price ranges
‚Ä¢ Daily price change with percentages

**üí° Usage Examples:**
‚Ä¢ `/stock AAPL` - Apple Inc. analysis
‚Ä¢ `/stock MSFT` - Microsoft Corporation
‚Ä¢ `/stock GOOGL` - Alphabet Inc. (Google)
‚Ä¢ `/stock TSLA` - Tesla Inc.

**‚ú® Advanced Features:**
‚Ä¢ Live price updates during market hours
‚Ä¢ Trend indicators (üìàüìâ‚û°Ô∏è)
‚Ä¢ Professional financial metrics
‚Ä¢ Sector-based stock organization
‚Ä¢ Smart stock symbol suggestions

**‚è∞ Market Hours:**
‚Ä¢ US Market: 9:30 AM - 4:00 PM EST
‚Ä¢ Pre/Post market data available
‚Ä¢ Weekend data shows Friday close

**üõ†Ô∏è Troubleshooting:**
‚Ä¢ No data? Market might be closed
‚Ä¢ Wrong symbol? Use `/list` to browse
‚Ä¢ Error? Try again in a few minutes

**üìû Support:**
Built by Maggie with ‚ù§Ô∏è for investors
Data powered by Yahoo Finance"""
    
    await update.message.reply_text(help_message)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ËôïÁêÜ‰∏ÄËà¨ÊñáÂ≠óË®äÊÅØ"""
    text = update.message.text.upper().strip()
    
    # Ê™¢Êü•ÊòØÂê¶ÁÇ∫ËÇ°Á•®‰ª£Á¢ºÊ†ºÂºè (2-5 ÂÄãÂ≠óÊØç)
    if len(text) >= 2 and len(text) <= 5 and text.isalpha():
        sp500_symbols = bot.get_sp500_symbols()
        
        if text in sp500_symbols:
            await update.message.reply_text(
                f"üí° Found '{text}' in S&P 500!\n"
                f"Use `/stock {text}` to get real-time data."
            )
            return
        else:
            # Êèê‰æõÁõ∏‰ººÁöÑËÇ°Á•®Âª∫Ë≠∞
            suggestions = [s for s in sp500_symbols if text in s or s.startswith(text[:2])][:3]
            if suggestions:
                await update.message.reply_text(
                    f"'{text}' not found in S&P 500.\n\n"
                    f"**Similar stocks:**\n" +
                    "\n".join([f"‚Ä¢ `/stock {s}`" for s in suggestions])
                )
                return
    
    # Ê™¢Êü•ÊòØÂê¶ÂåÖÂê´Áü•ÂêçËÇ°Á•®‰ª£Á¢º
    popular_symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'META', 'NVDA', 'JPM', 'WMT', 'KO']
    
    for symbol in popular_symbols:
        if symbol in text:
            await update.message.reply_text(
                f"üí° I detected '{symbol}' in your message!\n"
                f"Use `/stock {symbol}` to get real-time analysis."
            )
            return
    
    # ‰∏ÄËà¨ÂõûÊáâ
    responses = [
        "Hello! I'm Maggie Stock AI ü§ñ\n\nI specialize in real-time S&P 500 stock analysis.\nTry `/stock AAPL` or `/help` for guidance.",
        "Hi there! üëã\n\nI provide live financial data for S&P 500 stocks.\nUse `/list` to browse by sector or `/stock [SYMBOL]` for analysis.",
        "Welcome! üìà\n\nI'm here to help with stock market data.\nType `/help` for commands or try `/stock MSFT` for a demo."
    ]
    
    import random
    await update.message.reply_text(random.choice(responses))

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """ËôïÁêÜÈåØË™§"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """‰∏ªÂáΩÊï∏"""
    logger.info("Starting Maggie Stock AI Bot with enhanced S&P 500 coverage...")
    
    # È†êËºâÊ®ôÊôÆ500Ê∏ÖÂñÆ
    logger.info("Pre-loading expanded S&P 500 symbols...")
    symbols = bot.get_sp500_symbols()
    logger.info(f"Successfully loaded {len(symbols)} S&P 500 symbols")
    
    # Ê∏ÖÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑ webhook Ë°ùÁ™Å
    logger.info("Clearing any existing webhooks...")
    if clear_webhook():
        logger.info("Webhook cleared successfully")
    else:
        logger.warning("Failed to clear webhook, continuing anyway...")
    
    # Âª∫Á´ã Telegram ÊáâÁî®Á®ãÂ∫è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Ë®ªÂÜäÂëΩ‰ª§ËôïÁêÜÂô®
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("stock", stock_command))
    
    # Ë®ªÂÜäÊñáÂ≠óË®äÊÅØËôïÁêÜÂô®
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # Ë®ªÂÜäÈåØË™§ËôïÁêÜÂô®
    application.add_error_handler(error_handler)
    
    # ÂïüÂãïÊ©üÂô®‰∫∫
    if os.getenv('RENDER'):
        logger.info(f"Running in Render deployment mode on port {PORT}")
        try:
            # Ë®≠ÁΩÆ webhook
            if set_webhook():
                logger.info("Webhook set successfully, starting webhook server...")
                application.run_webhook(
                    listen="0.0.0.0",
                    port=PORT,
                    webhook_url=f"{os.getenv('RENDER_EXTERNAL_URL', 'https://maggie-stock-ai.onrender.com')}/{BOT_TOKEN}",
                    url_path=BOT_TOKEN,
                    allowed_updates=Update.ALL_TYPES
                )
            else:
                logger.warning("Webhook setup failed, falling back to polling...")
                application.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            logger.error(f"Webhook mode failed: {e}")
            logger.info("Falling back to polling mode...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
    else:
        logger.info("Running in local development mode with polling")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
